>>> add_integer = __import__('0-add_integer').add_integer

Positive Integers
-----------------
>>> add_integer(1, 2)
3
>>> add_integer(100, 200)
300
>>> add_integer(2**64 - 1, 3)
18446744073709551618

Negative Integers
-----------------
>>> add_integer(-10, -20)
-30
>>> add_integer(-5, 15)
10
>>> add_integer(-2**64 -1, 3)
-18446744073709551614

Floats
------
>>> add_integer(3.7, 2.3)
5
>>> add_integer(-2.8, 4.5)
2
>>> add_integer(1e100, 3)
10000000000000000159028911097599180468360808563945281389781327557747838772170381060813469985856815107
>>> add_integer(-1e100, 3)
-10000000000000000159028911097599180468360808563945281389781327557747838772170381060813469985856815101

Mixed int and float
-------------------
>>> add_integer(5, 3.2)
8
>>> add_integer(6.9, 4)
10

Booleans
--------
>>> add_integer(15, True)
16
>>> add_integer(False, 10)
10

Default value for b
-------------------
>>> add_integer(10)
108
>>> add_integer(3.3)
101


Type Errors
-----------
>>> add_integer(None)
Traceback (most recent call last):
    ...
raise TypeError: a must be an integer

>>> add_integer(12, None)
Traceback (most recent call last):
    ...
raise TypeError: a must be an integer

>>> add_integer("3", 5)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer(3, "5")
Traceback (most recent call last):
    ...
TypeError: b must be an integer

>>> add_integer([1, 2], 3)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer(3, {"num": 4})
Traceback (most recent call last):
    ...
TypeError: b must be an integer

Missing Arguments
-----------------
>>> add_integer()
Traceback (most recent call last):
    ...
TypeError: add_integer() missing 1 required positional argument: 'a'
